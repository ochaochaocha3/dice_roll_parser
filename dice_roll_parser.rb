#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'
require_relative 'node/all'

class DiceRollParser < Racc::Parser

module_eval(<<'...end dice_roll.y/module_eval...', 'dice_roll.y', 94)

  include Node

  RESERVED = {
    'd' => :SYM_D,
    'D' => :SYM_D
  }

  def parse(str)
    @q = []

    s = StringScanner.new(str)
    until s.eos?
      s.skip(/\s*/)
      case
      when s.scan(/\.\.\.?/)
        @q << [:RANGE, nil]
      when s.scan(/<=/)
        @q << [:LEQ, nil]
      when s.scan(/>=/)
        @q << [:GEQ, nil]
      when s.scan(/<>/)
        @q << [:NEQ, nil]
      when s.scan(/\d+/)
        @q << [:NUMBER, s[0].to_i]
      else
        ch = s.getch
        @q << [RESERVED[ch] || ch, ch]
      end
    end

    @q << [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

...end dice_roll.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    52,    10,    16,    12,    11,    15,    10,   -20,    12,
    14,    15,    10,    11,    12,    14,    15,    10,    11,    12,
    10,    15,    12,    14,    15,    10,    11,    12,    14,    15,
   -21,    11,   -22,    10,   -23,    12,    14,    15,    10,    11,
    12,    14,    15,    54,    11,    33,    10,    33,    12,    14,
    15,    10,    11,    12,    14,    15,    39,    11,   nil,    10,
   nil,    12,    14,    15,    10,    11,    12,    14,    15,   nil,
    11,   nil,    10,   nil,    12,    14,    15,    10,    11,    12,
    14,    15,    25,    26,   nil,    10,   nil,    12,    14,    15,
    25,    26,    23,    24,    10,    11,    12,    14,    15,    25,
    26,    50,    10,   nil,    12,    14,    15,    25,    26,    23,
    24,    17,    18,    19,    20,    21,    22,    25,    26,    23,
    24,    25,    26,    23,    24,    25,    26,    23,    24,    25,
    26,    23,    24,    25,    26,    23,    24,    25,    26,    23,
    24 ]

racc_action_check = [
     0,    38,    14,     1,    14,    10,    14,     0,     5,     0,
     0,     0,    10,    15,    10,    10,    10,    33,    17,    33,
    15,    33,    15,    15,    15,    17,    18,    17,    17,    17,
     7,    19,     8,    18,     9,    18,    18,    18,    19,    20,
    19,    19,    19,    53,    21,    13,    20,    32,    20,    20,
    20,    21,    22,    21,    21,    21,    16,    23,   nil,    22,
   nil,    22,    22,    22,    23,    24,    23,    23,    23,   nil,
    25,   nil,    24,   nil,    24,    24,    24,    25,    26,    25,
    25,    25,    47,    47,   nil,    26,   nil,    26,    26,    26,
    27,    27,    27,    27,    11,    52,    11,    11,    11,    46,
    46,    27,    52,   nil,    52,    52,    52,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,    43,    43,    43,
    43,    45,    45,    45,    45,    41,    41,    41,    41,    42,
    42,    42,    42,    44,    44,    44,    44,    40,    40,    40,
    40 ]

racc_action_pointer = [
    -9,     3,   nil,   101,   nil,   -11,   nil,    11,    13,    15,
    -4,    78,   nil,    26,   -14,     4,    56,     9,    17,    22,
    30,    35,    43,    48,    56,    61,    69,    84,   nil,   nil,
   nil,   nil,    28,     1,   nil,   nil,   nil,   nil,    -1,   nil,
   131,   119,   123,   111,   127,   115,    93,    76,   nil,   nil,
   nil,   nil,    86,    22,   nil ]

racc_action_default = [
    -3,   -33,    -1,    -2,   -14,   -15,   -16,   -17,   -18,   -19,
   -33,   -33,   -29,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -20,   -21,
   -22,   -23,   -28,   -33,   -24,   -25,   -26,   -31,   -33,    55,
    -4,    -5,    -6,    -7,    -8,    -9,   -10,   -11,   -12,   -13,
   -27,   -30,   -33,   -33,   -32 ]

racc_goto_table = [
    38,     3,    30,     2,    32,     1,    29,    31,   nil,    35,
    36,    27,    28,    37,   nil,    34,   nil,   nil,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    35,    36,
   nil,   nil,    51,   nil,    34,   nil,   nil,    53 ]

racc_goto_check = [
     4,     3,     8,     2,    10,     1,     7,     9,   nil,     7,
     9,     3,     5,    11,   nil,     5,   nil,   nil,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     7,     9,
   nil,   nil,    11,   nil,     5,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     5,     3,     1,   -15,     1,   nil,    -5,    -9,    -4,
    -7,    -1 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,     7,     8,     9,
    13,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  0, 23, :_reduce_3,
  3, 24, :_reduce_4,
  3, 24, :_reduce_5,
  3, 24, :_reduce_6,
  3, 24, :_reduce_7,
  3, 24, :_reduce_8,
  3, 24, :_reduce_9,
  3, 25, :_reduce_10,
  3, 25, :_reduce_11,
  3, 25, :_reduce_12,
  3, 25, :_reduce_13,
  1, 25, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  3, 27, :_reduce_27,
  2, 28, :_reduce_28,
  1, 29, :_reduce_29,
  3, 30, :_reduce_30,
  2, 30, :_reduce_31,
  5, 31, :_reduce_32 ]

racc_reduce_n = 33

racc_shift_n = 55

racc_token_table = {
  false => 0,
  :error => 1,
  :RANGE => 2,
  :DICE_ROLL => 3,
  :SHORT_DICE_ROLL => 4,
  :UNARY_MINUS => 5,
  "*" => 6,
  "/" => 7,
  "+" => 8,
  "-" => 9,
  "<" => 10,
  :LEQ => 11,
  ">" => 12,
  :GEQ => 13,
  "=" => 14,
  :NEQ => 15,
  "(" => 16,
  ")" => 17,
  :NUMBER => 18,
  :SYM_D => 19,
  "[" => 20,
  "]" => 21 }

racc_nt_base = 22

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "RANGE",
  "DICE_ROLL",
  "SHORT_DICE_ROLL",
  "UNARY_MINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"<\"",
  "LEQ",
  "\">\"",
  "GEQ",
  "\"=\"",
  "NEQ",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "SYM_D",
  "\"[\"",
  "\"]\"",
  "$start",
  "target",
  "judge",
  "exp",
  "primary",
  "parenthesis",
  "unary_minus",
  "number",
  "dice_roll",
  "range",
  "primary_without_unary_minus",
  "primary_without_dice_roll_unary_minus" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'dice_roll.y', 15)
  def _reduce_3(val, _values, result)
                result = ExpNode.new(NumNode.new(0))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 19)
  def _reduce_4(val, _values, result)
               result = JudgeNode.new(:<, val[0], val[2])
         
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 22)
  def _reduce_5(val, _values, result)
               result = JudgeNode.new(:<=, val[0], val[2])
         
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 25)
  def _reduce_6(val, _values, result)
               result = JudgeNode.new(:>, val[0], val[2])
         
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 28)
  def _reduce_7(val, _values, result)
               result = JudgeNode.new(:>=, val[0], val[2])
         
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 31)
  def _reduce_8(val, _values, result)
               result = JudgeNode.new(:==, val[0], val[2], op_for_display: :'=')
         
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 34)
  def _reduce_9(val, _values, result)
               result = JudgeNode.new(:!=, val[0], val[2], op_for_display: :'<>')
         
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 38)
  def _reduce_10(val, _values, result)
             result = BinaryOpNode.new(:+, val[0], val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 41)
  def _reduce_11(val, _values, result)
             result = BinaryOpNode.new(:-, val[0], val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 44)
  def _reduce_12(val, _values, result)
             result = BinaryOpNode.new(:*, val[0], val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 47)
  def _reduce_13(val, _values, result)
             # Racc の問題により :/ の後に空白が必要
         result = BinaryOpNode.new(:/ , val[0], val[2])
       
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'dice_roll.y', 66)
  def _reduce_27(val, _values, result)
                     result = ExpNode.new(val[1])
               
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 69)
  def _reduce_28(val, _values, result)
                     result = UnaryMinusNode.new(val[1])
               
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 72)
  def _reduce_29(val, _values, result)
                result = NumNode.new(val[0])
          
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 76)
  def _reduce_30(val, _values, result)
                   result = DiceRollNode.new(val[0], val[2])
             
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 79)
  def _reduce_31(val, _values, result)
                   result = DiceRollNode.new(NumNode.new(1), val[1])
             
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 83)
  def _reduce_32(val, _values, result)
               result = RangeNode.new(val[1], val[3])
         
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class DiceRollParser


