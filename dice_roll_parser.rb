#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'
require_relative 'node/all'

class DiceRollParser < Racc::Parser

module_eval(<<'...end dice_roll.y/module_eval...', 'dice_roll.y', 63)

  include Node

  RESERVED = {
    'd' => :SYM_D,
    'D' => :SYM_D
  }

  def parse(str)
    @q = []

    s = StringScanner.new(str)
    until s.eos?
      s.skip(/\s*/)
      case
      when s.scan(/\.\.\.?/)
        @q << [:RANGE, nil]
      when s.scan(/\d+/)
        @q << [:NUMBER, s[0].to_i]
      else
        ch = s.getch
        @q << [RESERVED[ch] || ch, ch]
      end
    end

    @q << [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

...end dice_roll.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    26,    13,    14,    11,    12,     4,    25,     5,     8,     9,
     4,    15,     5,     8,     9,     4,    15,     5,     8,     9,
     4,    15,     5,     8,     9,     4,    15,     5,     8,     9,
     4,    19,     5,     8,     9,     4,    10,     5,     8,     9,
     4,   nil,     5,     8,     9,     4,   nil,     5,     8,     9,
     4,   nil,     5,     8,     9,    13,    14,    11,    12,    15,
   nil,    28,    13,    14,    13,    14 ]

racc_action_check = [
    18,    16,    16,    16,    16,     0,    16,     0,     0,     0,
     4,    18,     4,     4,     4,     8,     3,     8,     8,     8,
     9,    24,     9,     9,     9,    11,    17,    11,    11,    11,
    12,    10,    12,    12,    12,    13,     1,    13,    13,    13,
    14,   nil,    14,    14,    14,    15,   nil,    15,    15,    15,
    26,   nil,    26,    26,    26,     2,     2,     2,     2,    27,
   nil,    27,    20,    20,    21,    21 ]

racc_action_pointer = [
    -5,    36,    49,     3,     0,   nil,   nil,   nil,     5,    10,
    31,    15,    20,    25,    30,    35,    -5,    13,    -2,   nil,
    56,    58,   nil,   nil,     8,   nil,    40,    46,   nil ]

racc_action_default = [
    -2,   -15,    -1,    -7,   -15,    -9,   -10,   -11,   -15,   -15,
   -15,   -15,   -15,   -15,   -15,   -15,   -15,   -13,   -15,    29,
    -3,    -4,    -5,    -6,   -12,    -8,   -15,   -15,   -14 ]

racc_goto_table = [
    17,    18,     2,     1,   nil,   nil,    16,    24,   nil,   nil,
   nil,   nil,   nil,    20,    21,    22,    23,   nil,    27 ]

racc_goto_check = [
     3,     3,     2,     1,   nil,   nil,     2,     3,   nil,   nil,
   nil,   nil,   nil,     2,     2,     2,     2,   nil,     3 ]

racc_goto_pointer = [
   nil,     3,     2,    -8,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     6,     7 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 17, :_reduce_1,
  0, 17, :_reduce_2,
  3, 18, :_reduce_3,
  3, 18, :_reduce_4,
  3, 18, :_reduce_5,
  3, 18, :_reduce_6,
  1, 18, :_reduce_none,
  3, 19, :_reduce_8,
  1, 19, :_reduce_9,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  3, 20, :_reduce_12,
  2, 20, :_reduce_13,
  5, 21, :_reduce_14 ]

racc_reduce_n = 15

racc_shift_n = 29

racc_token_table = {
  false => 0,
  :error => 1,
  :RANGE => 2,
  :DICE_ROLL => 3,
  :SHORT_DICE_ROLL => 4,
  :UMINUS => 5,
  "*" => 6,
  "/" => 7,
  "+" => 8,
  "-" => 9,
  "(" => 10,
  ")" => 11,
  :NUMBER => 12,
  :SYM_D => 13,
  "[" => 14,
  "]" => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "RANGE",
  "DICE_ROLL",
  "SHORT_DICE_ROLL",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "SYM_D",
  "\"[\"",
  "\"]\"",
  "$start",
  "target",
  "exp",
  "primary",
  "dice_roll",
  "range" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'dice_roll.y', 12)
  def _reduce_1(val, _values, result)
                unless val[0].kind_of?(ExpNode)
              result = ExpNode.new(val[0])
            end
          
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 17)
  def _reduce_2(val, _values, result)
                result = ExpNode.new(NumNode.new(0))
          
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 21)
  def _reduce_3(val, _values, result)
             result = BinaryOpNode.new(:+, val[0], val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 24)
  def _reduce_4(val, _values, result)
             result = BinaryOpNode.new(:-, val[0], val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 27)
  def _reduce_5(val, _values, result)
             result = BinaryOpNode.new(:*, val[0], val[2])
       
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 30)
  def _reduce_6(val, _values, result)
             # Racc の問題により :/ の後に空白が必要
         result = BinaryOpNode.new(:/ , val[0], val[2])
       
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'dice_roll.y', 36)
  def _reduce_8(val, _values, result)
                 result = ExpNode.new(val[1])
           
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 39)
  def _reduce_9(val, _values, result)
                 result = NumNode.new(val[0])
           
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'dice_roll.y', 45)
  def _reduce_12(val, _values, result)
                   result = DiceRollNode.new(val[0], val[2])
             
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 48)
  def _reduce_13(val, _values, result)
                   result = DiceRollNode.new(NumNode.new(1), val[1])
             
    result
  end
.,.,

module_eval(<<'.,.,', 'dice_roll.y', 52)
  def _reduce_14(val, _values, result)
               result = RangeNode.new(val[1], val[3])
         
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class DiceRollParser


